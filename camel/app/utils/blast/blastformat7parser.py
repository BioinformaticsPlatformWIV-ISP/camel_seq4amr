import re
from pathlib import Path

from typing import Dict, List


class BlastFormat7Parser(object):
    """
    This class parses tabular output files generated by Blastn / Blastx with output format 7 (-outfmt 7).
    """

    COLUMN_MAPPING = {
        '% identity': 'pident',
        '% positives': 'ppos',
        '% query coverage per hsp': 'qcovhsp',
        '% query coverage per subject': 'qcovs',
        'BTOP': 'btop',
        'alignment length': 'length',
        'bit score': 'bitscore',
        'evalue': 'evalue',
        'gap opens': 'gapopen',
        'gaps': 'gaps',
        'identical': 'nident',
        'mismatches': 'mismatch',
        'positives': 'positive',
        'q. end': 'qend',
        'q. start': 'qstart',
        'query acc.': 'qacc',
        'query acc.ver': 'qaccver',
        'query frame': 'qframe',
        'query gi': 'qgi',
        'query id': 'qseqid',
        'query length': 'qlen',
        'query seq': 'qseq',
        'query/sbjct frames': 'frames',
        's. end': 'send',
        's. start': 'sstart',
        'sbjct frame': 'sframe',
        'score': 'score',
        'subject acc.': 'sacc',
        'subject acc.ver': 'saccver',
        'subject accs.': 'sallacc',
        'subject blast names': 'sblastnames',
        'subject com names': 'scomnames',
        'subject gi': 'sgi',
        'subject gis': 'sallgi',
        'subject id': 'sseqid',
        'subject ids': 'sallseqid',
        'subject length': 'slen',
        'subject sci names': 'sscinames',
        'subject seq': 'sseq',
        'subject strand': 'sstrand',
        'subject super kingdoms': 'sskingdoms',
        'subject tax ids': 'staxids',
        'subject title': 'stitle',
        'subject titles': 'salltitles'
    }

    @staticmethod
    def __is_valid_blast_output(lines_blast_output: List[str]) -> bool:
        """
        Checks if the output is valid Blastn / Blastx output.
        :param lines_blast_output: Lines from the Blastn / Blastx output file.
        :return: True if valid
        """
        if re.match(r'# BLAST[NX] \d+\.\d+\.\d+\+', lines_blast_output[0].strip()) is None:
            return False
        return True

    @staticmethod
    def parse_output_file(output_file: Path, use_abbreviations: bool = True) -> List[Dict]:
        """
        Parses the given output file.
        :param output_file: Output file
        :param use_abbreviations: If True, abbreviations are used (e.g. 'qseqid' instead of 'query id')
        :return: List of (Column name: Value) with all the hits
        """
        with open(output_file, 'r') as handle:
            content = handle.readlines()
        if not BlastFormat7Parser.__is_valid_blast_output(content):
            raise ValueError("Invalid blast output: {}".format(output_file))

        columns = None

        hits = []
        for line in content:
            if (line.startswith('# Fields')) and (columns is None):
                fields = line.replace('# Fields: ', '').strip().split(', ')
                if use_abbreviations:
                    columns = [BlastFormat7Parser.COLUMN_MAPPING[fields] for fields in fields]
                else:
                    columns = fields

            if not line.startswith('#'):
                if columns is None:
                    raise ValueError("Hit line found before field line")
                hits.append({key: BlastFormat7Parser.__convert_value(value) for key, value in
                             zip(columns, line.strip().split('\t'))})
        return hits

    @staticmethod
    def __convert_value(value):
        """
        Tries to convert the value to its correct type.
        First tries to convert it to integer.
        Then tries to convert it to float.
        Otherwise it returns the string.
        :param value: Input value
        :return: Converted value
        """
        try:
            return int(value)
        except ValueError:
            pass
        try:
            return float(value)
        except ValueError:
            pass
        return value
